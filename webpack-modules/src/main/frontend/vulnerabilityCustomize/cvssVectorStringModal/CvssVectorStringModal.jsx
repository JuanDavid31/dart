/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { isEmpty } from 'ramda';
import { selectCvssVectorModalSlice } from './cvssVectorStringModalSelectors';
import UnsavedChangesModal from '../../unsavedChangesModal/UnsavedChangesModal';
import {
  NxModal,
  NxH2,
  NxFormGroup,
  NxTextInput,
  NxFieldset,
  NxCheckbox,
  NxFormSelect,
  NxStatefulForm,
} from '@sonatype/react-shared-components';
import { actions } from './cvssVectorStringModalSlice';
import { selectVulnerabilityCustomize } from 'MainRoot/vulnerabilityCustomize/vulnerabilityCustomizeSelectors';
import { MSG_NO_CHANGES_TO_SAVE } from 'MainRoot/util/constants';

const getValidationMessage = (isDirty, validationError) => {
  if (!isDirty) {
    return MSG_NO_CHANGES_TO_SAVE;
  }

  return validationError;
};

export default function CVSSVectorStringModal() {
  const dispatch = useDispatch();

  const {
    isModalOpen,
    submitMaskState,
    submitError,
    isDirty,
    isUnsavedChangesModalOpen,
    customCvssVectorStringInput,
    customCvssVectorScopeInput,
    auditCommentInput,
    validationError,
    appCategoriesFromSelectedScope,
    selectedAppCategories,
  } = useSelector(selectCvssVectorModalSlice);

  const {
    originalCvssVector,
    customCvssVector: storedCustomCvssVector,
    appCategoriesByOwners,
    ownersFromPath,
    ownerInPath,
  } = useSelector(selectVulnerabilityCustomize);

  const closeModalWithCheck = () => dispatch(actions.closeModal({ isDirty }));
  const closeUnsavedChangesModal = () => dispatch(actions.closeUnsavedChangesModal({}));
  const closeModal = () => dispatch(actions.closeModal({}));
  const saveCvssVectorString = () => dispatch(actions.saveCvssVectorString());
  const onChangeVectorString = (value) => dispatch(actions.setCvssVectorString({ value }));
  const onChangeAuditComment = (value) => dispatch(actions.setAuditComment({ value }));
  const onChangeScope = (evt) => dispatch(actions.setScope({ evt, appCategoriesByOwners }));
  const onChangeAppCategories = (appCategory) => dispatch(actions.setAppCategories(appCategory));
  const doLoad = () =>
    dispatch(actions.loadCvssVectorStringModal({ storedCustomCvssVector, appCategoriesByOwners, ownerInPath }));

  const renderCategoryCheckbox = ({ id, name }) => (
    <NxCheckbox key={id} onChange={() => onChangeAppCategories(id)} isChecked={selectedAppCategories.includes(id)}>
      {name}
    </NxCheckbox>
  );

  useEffect(() => {
    return () => {
      closeModal();
    };
  }, []);

  useEffect(() => {
    if (isModalOpen) {
      doLoad();
    }
  }, [isModalOpen]);

  return (
    <>
      {isModalOpen ? (
        <NxModal id="custom-cvss-vector-modal" onCancel={closeModalWithCheck}>
          <NxStatefulForm
            onSubmit={saveCvssVectorString}
            onCancel={closeModalWithCheck}
            submitMaskState={submitMaskState}
            submitBtnText="Save"
            doLoad={doLoad}
            submitError={submitError}
            validationErrors={getValidationMessage(isDirty, validationError)}
          >
            <NxModal.Header>
              <NxH2>Add Custom CVSS Vector String</NxH2>
            </NxModal.Header>
            <NxModal.Content>
              <NxFormGroup
                id="cvss-vector-string"
                label="Custom CVSS Vector String"
                sublabel={`Original CVSS Vector String: ${originalCvssVector}`}
              >
                <NxTextInput onChange={onChangeVectorString} maxLength={200} {...customCvssVectorStringInput} />
              </NxFormGroup>

              <NxFormGroup
                id="cvss-vector-string-scope"
                className="iq-info-sublabel"
                label="Scope"
                sublabel="Apply changes to"
                isRequired
              >
                <NxFormSelect onChange={onChangeScope} {...customCvssVectorScopeInput}>
                  {ownersFromPath?.map((owner) => (
                    <option value={owner.id} key={owner.id}>
                      {`${owner.label} - ${owner.name}`}
                    </option>
                  ))}
                </NxFormSelect>
              </NxFormGroup>

              {appCategoriesFromSelectedScope && !isEmpty(appCategoriesFromSelectedScope) && (
                <NxFieldset
                  id="cvss-vector-string-app-categories"
                  className="iq-info-sublabel"
                  label="Application Categories"
                  sublabel="Apply changes to"
                >
                  <div className={appCategoriesFromSelectedScope?.length > 9 ? 'iq-modal-grid' : ''}>
                    {appCategoriesFromSelectedScope.map(renderCategoryCheckbox)}
                  </div>
                </NxFieldset>
              )}
              <NxFormGroup
                id="cvss-vector-string-audit-comment"
                label="Audit Comment"
                sublabel="Include an explanation for changes made to the original CVSS Vector String. Comments entered here will appear in the audit log."
              >
                <NxTextInput onChange={onChangeAuditComment} {...auditCommentInput} type="textarea" />
              </NxFormGroup>
            </NxModal.Content>
          </NxStatefulForm>
        </NxModal>
      ) : null}

      {isUnsavedChangesModalOpen ? (
        <UnsavedChangesModal onContinue={closeModal} onClose={closeUnsavedChangesModal} />
      ) : null}
    </>
  );
}
