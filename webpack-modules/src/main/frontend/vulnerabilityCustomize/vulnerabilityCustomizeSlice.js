/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import { combineReducers } from 'redux';
import axios from 'axios';
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { getComponentName } from 'MainRoot/util/componentNameUtils';
import {
  getOwnerHierarchyUrl,
  getApplicableCategoriesUrl,
  getComponentDisplayNameByIdentifierUrl,
  getVulnerabilityJsonDetailUrl,
  getVulnerabilityCustomRemediationRefIdUrl,
  getVulnerabilityCustomCweRefIdUrl,
  getVulnerabilityCustomCvssVectorRefIdUrl,
  getVulnerabilityCustomCvssSeverityRefIdUrl,
} from 'MainRoot/util/CLMLocation';
import { processOwnerHierarchy } from 'MainRoot/util/hierarchyUtil';
import { Messages } from 'MainRoot/utilAngular/CommonServices';
import { selectRouterCurrentParams } from 'MainRoot/reduxUiRouter/routerSelectors';
import remediationModalSlice from './remediationModal/remediationModalSlice';
import cweIdModalSlice from './cweIdModal/cweIdModalSlice';
import cvssVectorStringModalSlice from './cvssVectorStringModal/cvssVectorStringModalSlice';
import cvssSeverityModalSlice from './cvssSeverityModal/cvssSeverityModalSlice';

const REDUCER_NAME = 'vulnerabilityCustomize';

export const initialState = {
  loading: false,
  loadError: null,
  refId: null,
  componentIdentifier: null,
  componentDisplayName: null,
  appCategoriesByOwners: null,
  vulnerabilityDetails: null,
  ownerInPath: null,
  ownersFromPath: null,
  customRemediation: null,
  originalCweId: null,
  customCweId: null,
  originalCvssVector: null,
  customCvssVector: null,
  originalCvssSeverity: null,
  customCvssSeverity: null,
};

const requestStarted = (state) => {
  state.loading = true;
  state.loadError = null;
};

const loadVulnerabilityCustomizeFulfilled = (
  state,
  {
    payload: {
      refId,
      componentIdentifier,
      componentDisplayName,
      vulnerabilityData,
      ownerInPath,
      ownersFromPath,
      appCategoriesByOwners,
      customRemediation,
      customCweId,
      customCvssVector,
      customCvssSeverity,
    },
  }
) => {
  state.loading = false;
  state.loadError = null;
  state.refId = refId;
  state.componentIdentifier = componentIdentifier;
  state.componentDisplayName = componentDisplayName;
  state.vulnerabilityDetails = {
    researchType: vulnerabilityData.researchType,
    isAdvancedVulnerabilityDetection: vulnerabilityData.isAdvancedVulnerabilityDetection,
  };
  state.originalCweId = vulnerabilityData.weakness.cweIds[0].id;
  state.originalCvssVector = vulnerabilityData.mainSeverity.vector;
  state.originalCvssSeverity = vulnerabilityData.mainSeverity.score;
  state.ownerInPath = ownerInPath;
  state.ownersFromPath = ownersFromPath;
  state.appCategoriesByOwners = appCategoriesByOwners;

  fillCustomData(customRemediation, state, 'customRemediation', ownersFromPath, appCategoriesByOwners);
  fillCustomData(customCweId, state, 'customCweId', ownersFromPath, appCategoriesByOwners);
  fillCustomData(customCvssVector, state, 'customCvssVector', ownersFromPath, appCategoriesByOwners);
  fillCustomData(customCvssSeverity, state, 'customCvssSeverity', ownersFromPath, appCategoriesByOwners);
};

const fillCustomData = (customDataResult, state, stateField, ownersFromPath, appCategoriesByOwners) => {
  if (customDataResult) {
    state[stateField] = customDataResult;
    const customDataOwner = ownersFromPath.find(({ id }) => id === customDataResult.ownerId);
    state[stateField].ownerLabel = customDataOwner.label;
    state[stateField].ownerName = customDataOwner.name;
    state[stateField].ownerType = customDataOwner.type;
    if (customDataResult.applicationCategoryIds) {
      state[stateField].applicationCategories = appCategoriesByOwners
        ?.find(({ ownerId }) => ownerId === customDataOwner.publicId)
        ?.applicationCategories.filter(({ id }) => customDataResult.applicationCategoryIds.includes(id));
    }
  } else {
    state[stateField] = initialState[stateField];
  }
};

const requestFailed = (state, { payload }) => {
  state.loading = false;
  state.loadError = Messages.getHttpErrorMessage(payload);
};

const loadVulnerabilityCustomize = createAsyncThunk(
  `${REDUCER_NAME}/loadVulnerabilityCustomize`,
  async (_, { getState, rejectWithValue }) => {
    const state = getState();
    const {
      ownerType: ownerTypeInPath,
      ownerId: ownerIdInPath,
      refId,
      componentIdentifier,
    } = selectRouterCurrentParams(state);

    const results = {};
    let componentIdentifierParsed = null;

    try {
      if (componentIdentifier) {
        componentIdentifierParsed = JSON.parse(componentIdentifier);
      }

      const promises = [
        axios.get(getOwnerHierarchyUrl(ownerTypeInPath, ownerIdInPath)),
        axios.get(getApplicableCategoriesUrl(ownerTypeInPath, ownerIdInPath)),
        axios.get(getVulnerabilityJsonDetailUrl(refId, componentIdentifierParsed)),
      ];
      if (componentIdentifier) {
        promises.push(axios.get(getComponentDisplayNameByIdentifierUrl(decodeURIComponent(componentIdentifier))));
      }

      const initialRequests = await Promise.all(promises);
      results.ownersFromPath = processOwnerHierarchy(initialRequests[0].data);
      results.appCategoriesByOwners = initialRequests[1].data.applicationCategoriesByOwner;

      let allAppCategories = [];
      results.appCategoriesByOwners
        .slice()
        .reverse()
        .map((owner) => {
          if (owner.ownerType !== 'application') {
            const currentOwnerCategories = owner.applicationCategories.slice();
            owner.applicationCategories = owner.applicationCategories.concat(allAppCategories);
            allAppCategories = allAppCategories.concat(currentOwnerCategories);
          }
        });

      results.vulnerabilityData = initialRequests[2].data;

      if (initialRequests.length > 3) {
        results.componentDisplayName = getComponentName({ displayName: initialRequests[3].data });
      }
    } catch (err) {
      return rejectWithValue(err);
    }

    const ownerInPath = results.ownersFromPath.find(
      ({ type, publicId }) => type === ownerTypeInPath && publicId === ownerIdInPath
    );

    const [customRemediation, customCweId, customCvssVector, customCvssSeverity] = await Promise.all(
      [
        axios.get(
          getVulnerabilityCustomRemediationRefIdUrl(ownerInPath.type, ownerInPath.id, refId, componentIdentifier)
        ),
        axios.get(getVulnerabilityCustomCweRefIdUrl(ownerInPath.type, ownerInPath.id, refId, componentIdentifier)),
        axios.get(
          getVulnerabilityCustomCvssVectorRefIdUrl(ownerInPath.type, ownerInPath.id, refId, componentIdentifier)
        ),
        axios.get(
          getVulnerabilityCustomCvssSeverityRefIdUrl(ownerInPath.type, ownerInPath.id, refId, componentIdentifier)
        ),
      ].map((apiCallPromise) => apiCallPromise.catch((error) => error))
    );

    if (customRemediation?.data) {
      results.customRemediation = customRemediation.data;
    } else if (customRemediation?.response?.status !== 404) {
      return rejectWithValue(customRemediation);
    }

    if (customCweId?.data) {
      results.customCweId = customCweId.data;
    } else if (customCweId?.response?.status !== 404) {
      return rejectWithValue(customCweId);
    }

    if (customCvssVector?.data) {
      results.customCvssVector = customCvssVector.data;
    } else if (customCvssVector?.response?.status !== 404) {
      return rejectWithValue(customCvssVector);
    }

    if (customCvssSeverity?.data) {
      results.customCvssSeverity = customCvssSeverity.data;
    } else if (customCvssSeverity?.response?.status !== 404) {
      return rejectWithValue(customCvssSeverity);
    }

    return { ...results, ownerInPath, refId, componentIdentifier: componentIdentifierParsed };
  }
);

const vulnerabilityCustomize = createSlice({
  name: REDUCER_NAME,
  initialState,
  extraReducers: {
    [loadVulnerabilityCustomize.pending]: requestStarted,
    [loadVulnerabilityCustomize.fulfilled]: loadVulnerabilityCustomizeFulfilled,
    [loadVulnerabilityCustomize.rejected]: requestFailed,
  },
});

export const actions = {
  ...vulnerabilityCustomize.actions,
  loadVulnerabilityCustomize,
};
export default combineReducers({
  customize: vulnerabilityCustomize.reducer,
  remediationModal: remediationModalSlice,
  cweIdModal: cweIdModalSlice,
  cvssVectorModal: cvssVectorStringModalSlice,
  cvssSeverityModal: cvssSeverityModalSlice,
});
