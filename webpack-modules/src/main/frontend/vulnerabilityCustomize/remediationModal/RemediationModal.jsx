/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { isEmpty } from 'ramda';
import { selectRemediationModalSlice } from './remediationModalSelectors';
import UnsavedChangesModal from '../../unsavedChangesModal/UnsavedChangesModal';
import {
  NxModal,
  NxH2,
  NxStatefulForm,
  NxFormGroup,
  NxTextInput,
  NxFieldset,
  NxCheckbox,
  NxFormSelect,
} from '@sonatype/react-shared-components';
import { actions } from './remediationModalSlice';
import { selectVulnerabilityCustomize } from 'MainRoot/vulnerabilityCustomize/vulnerabilityCustomizeSelectors';
import { MSG_NO_CHANGES_TO_SAVE } from 'MainRoot/util/constants';

const getValidationMessage = (isDirty, validationError) => {
  if (!isDirty) {
    return MSG_NO_CHANGES_TO_SAVE;
  }

  return validationError;
};

export default function RemediationModal() {
  const dispatch = useDispatch();

  const {
    isModalOpen,
    isEditMode,
    submitMaskState,
    submitError,
    isDirty,
    isUnsavedChangesModalOpen,
    customRemediationMessageInput,
    customRemediationScopeInput,
    auditCommentInput,
    validationError,
    appCategoriesFromSelectedScope,
    selectedAppCategories,
  } = useSelector(selectRemediationModalSlice);

  const {
    customRemediation: storedCustomRemediation,
    appCategoriesByOwners,
    ownersFromPath,
    ownerInPath,
  } = useSelector(selectVulnerabilityCustomize);

  const closeModalWithCheck = () => dispatch(actions.closeModal({ isDirty }));
  const closeUnsavedChangesModal = () => dispatch(actions.closeUnsavedChangesModal());
  const closeModal = () => dispatch(actions.closeModal());
  const saveRemediation = () => dispatch(actions.saveRemediation());
  const onChangeRemediation = (value) => dispatch(actions.setRemediation({ value }));
  const onChangeAuditComment = (value) => dispatch(actions.setAuditComment({ value }));
  const onChangeScope = (evt) => dispatch(actions.setScope({ evt, appCategoriesByOwners }));
  const onChangeAppCategories = (appCategory) => dispatch(actions.setAppCategories(appCategory));
  const doLoad = () =>
    dispatch(actions.loadRemediationModal({ storedCustomRemediation, appCategoriesByOwners, ownerInPath }));

  useEffect(() => {
    return () => {
      closeModal();
    };
  }, []);

  useEffect(() => {
    if (isModalOpen) {
      doLoad();
    }
  }, [isModalOpen]);

  return (
    <>
      {isModalOpen ? (
        <NxModal id="custom-remediation-modal" onCancel={closeModalWithCheck}>
          <NxStatefulForm
            onSubmit={saveRemediation}
            onCancel={closeModalWithCheck}
            submitMaskState={submitMaskState}
            submitBtnText="Save"
            doLoad={doLoad}
            submitError={submitError}
            validationErrors={getValidationMessage(isDirty, validationError)}
          >
            <NxModal.Header>
              <NxH2>{isEditMode ? 'Edit ' : 'Add '} Remediation Message</NxH2>
            </NxModal.Header>
            <NxModal.Content>
              <NxFormGroup
                id="remediation-message"
                label="Remediation Message"
                sublabel="Add your suggested remediation steps for this vulnerability. This could include prioritization of fixing
                this vulnerability, upgrading this component, using a different component, or waiving the policy
                violation."
                isRequired
              >
                <NxTextInput
                  onChange={onChangeRemediation}
                  type="textarea"
                  maxLength={3000}
                  {...customRemediationMessageInput}
                />
              </NxFormGroup>

              <NxFormGroup
                id="remediation-scope"
                className="iq-info-sublabel"
                label="Scope"
                sublabel="Apply changes to"
                isRequired
              >
                <NxFormSelect onChange={onChangeScope} {...customRemediationScopeInput}>
                  {ownersFromPath?.map((owner) => (
                    <option value={owner.id} key={owner.id}>
                      {`${owner.label} - ${owner.name}`}
                    </option>
                  ))}
                </NxFormSelect>
              </NxFormGroup>

              {appCategoriesFromSelectedScope && !isEmpty(appCategoriesFromSelectedScope) && (
                <NxFieldset className="iq-info-sublabel" label="Application Categories" sublabel="Apply changes to">
                  <div
                    id="remediation-categories"
                    className={appCategoriesFromSelectedScope?.length > 9 ? 'iq-modal-grid' : ''}
                  >
                    {appCategoriesFromSelectedScope?.map(({ id, name }) => (
                      <NxCheckbox
                        key={id}
                        onChange={() => onChangeAppCategories(id)}
                        isChecked={selectedAppCategories.includes(id)}
                      >
                        {name}
                      </NxCheckbox>
                    ))}
                  </div>
                </NxFieldset>
              )}

              <NxFormGroup
                id="remediation-audit-comment"
                label="Audit Comment"
                sublabel="Include an explanation for changes made to the Remediation message. Comments entered here will appear in
                the audit log."
              >
                <NxTextInput onChange={onChangeAuditComment} {...auditCommentInput} type="textarea" />
              </NxFormGroup>
            </NxModal.Content>
          </NxStatefulForm>
        </NxModal>
      ) : null}

      {isUnsavedChangesModalOpen ? (
        <UnsavedChangesModal onContinue={closeModal} onClose={closeUnsavedChangesModal} />
      ) : null}
    </>
  );
}
