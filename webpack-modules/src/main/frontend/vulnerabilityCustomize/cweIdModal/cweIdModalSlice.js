/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { nxTextInputStateHelpers, nxFormSelectStateHelpers } from '@sonatype/react-shared-components';
import { append, without } from 'ramda';
import axios from 'axios';
import { Messages } from 'MainRoot/utilAngular/CommonServices';
import { propSet, eqValues } from 'MainRoot/util/jsUtil';
import { validateNonEmpty } from 'MainRoot/util/validationUtil';
import { selectVulnerabilityCustomize } from 'MainRoot/vulnerabilityCustomize/vulnerabilityCustomizeSelectors';
import { selectCweIdModalSlice } from 'MainRoot/vulnerabilityCustomize/cweIdModal/cweIdModalSelectors';
import { startSaveMaskSuccessTimer } from 'MainRoot/util/reduxUtil';
import { stateReload } from 'MainRoot/reduxUiRouter/routerActions';
import { getVulnerabilityCustomCweIdUrl, getVulnerabilityCustomCweUrl } from 'MainRoot/util/CLMLocation';
import { SUBMIT_MASK_SUCCESS_VISIBLE_TIME_MS } from '@sonatype/react-shared-components';

const { initialState: rscInitialState, userInput } = nxTextInputStateHelpers;
const { initialState: rscInitialSelectState, userInput: userSelectInput } = nxFormSelectStateHelpers;

const REDUCER_NAME = 'CweId';

const validateCweIds = (val) => {
  const validCweIds = new RegExp(/^\d+(?:,\d+)*$/);
  return !validCweIds.test(val) ? 'Only numbers and comma separated numbers are accepted' : null;
};

export const initialState = {
  submitError: null,
  submitMaskState: null,
  isModalOpen: false,
  isEditMode: false,
  isDirty: false,
  customCweIdInput: rscInitialState('', validateCweIds),
  customCweIdScopeInput: rscInitialSelectState(''),
  appCategoriesFromSelectedScope: null,
  selectedAppCategories: [],
  auditCommentInput: rscInitialState(''),
  isUnsavedChangesModalOpen: false,
  validationError: false,
  storedCustomCweId: null,
};

const loadCweIdModal = (state, { payload: { storedCustomCweId, appCategoriesByOwners, ownerInPath } }) => {
  state.isEditMode = !!storedCustomCweId;
  state.storedCustomCweId = storedCustomCweId;
  if (storedCustomCweId?.cweId?.toString()) {
    state.customCweIdInput = rscInitialState(storedCustomCweId.cweId, validateCweIds);
  } else {
    state.customCweIdInput = rscInitialState('');
  }
  state.customCweIdScopeInput = rscInitialSelectState(storedCustomCweId?.ownerId || ownerInPath.id);
  state.auditCommentInput = rscInitialState('');

  const isApplicationScope = (storedCustomCweId?.ownerType || ownerInPath.type) === 'application';
  if (!isApplicationScope) {
    const currentOwnerId = storedCustomCweId?.ownerId || ownerInPath.id;
    state.appCategoriesFromSelectedScope = appCategoriesByOwners.find(
      ({ ownerId }) => ownerId === currentOwnerId
    ).applicationCategories;
  }

  state.selectedAppCategories = storedCustomCweId?.applicationCategoryIds || [];
  state.validationError = state.isEditMode ? null : validateNonEmpty(state.customCweIdInput.value);
};

const closeModal = (state, { payload }) => {
  if (payload?.isDirty) {
    state.isUnsavedChangesModalOpen = true;
    return;
  }
  Object.assign(state, initialState);
};

const closeUnsavedChangesModal = (state) => {
  state.isUnsavedChangesModalOpen = false;
};

const requestFulfilled = (state) => {
  state.isDirty = false;
  state.submitError = null;
  state.submitMaskState = true;
};

const requestFailed = (state, { payload }) => {
  state.submitMaskState = null;
  state.submitError = Messages.getHttpErrorMessage(payload);
};

const computeIsDirty = (state) => {
  const {
    customCweIdInput,
    customCweIdScopeInput,
    selectedAppCategories,
    auditCommentInput,
    storedCustomCweId,
  } = state;

  if (!state.isEditMode) {
    state.isDirty =
      !!customCweIdInput.value ||
      !customCweIdScopeInput.isPristine ||
      selectedAppCategories.length > 0 ||
      !!auditCommentInput.value;
    return;
  }

  state.isDirty =
    customCweIdInput.value !== storedCustomCweId.cweId ||
    customCweIdScopeInput.value !== storedCustomCweId.ownerId ||
    !eqValues(selectedAppCategories, storedCustomCweId.applicationCategoryIds || []) ||
    !!auditCommentInput.value;
};

const saveCweId = createAsyncThunk(`${REDUCER_NAME}/saveCweId`, async (_, { getState, dispatch, rejectWithValue }) => {
  const state = getState();
  const {
    customCweIdInput,
    customCweIdScopeInput,
    selectedAppCategories,
    auditCommentInput,
    storedCustomCweId,
  } = selectCweIdModalSlice(state);
  const { refId, componentIdentifier, ownersFromPath } = selectVulnerabilityCustomize(state);

  const newData = {
    ownerId: customCweIdScopeInput.value,
    refId: refId,
    cweId: customCweIdInput.trimmedValue,
    applicationCategoryIds: selectedAppCategories,
    comment: auditCommentInput.trimmedValue,
  };
  if (componentIdentifier) {
    newData.componentIdentifier = componentIdentifier;
  }

  const selectedOwnerType = ownersFromPath.find(({ id }) => id === newData.ownerId).type;

  if (newData.cweId === '' && storedCustomCweId?.id) {
    try {
      await axios.delete(getVulnerabilityCustomCweIdUrl(selectedOwnerType, newData.ownerId, storedCustomCweId.id));
    } catch (err) {
      return rejectWithValue(err);
    }
    startSaveMaskSuccessTimer(dispatch, actions.closeModal);
    return setTimeout(() => dispatch(stateReload()), SUBMIT_MASK_SUCCESS_VISIBLE_TIME_MS);
  }
  try {
    await axios.post(getVulnerabilityCustomCweUrl(selectedOwnerType, newData.ownerId), newData);
  } catch (err) {
    return rejectWithValue(err);
  }
  startSaveMaskSuccessTimer(dispatch, actions.closeModal);
  return setTimeout(() => dispatch(stateReload()), SUBMIT_MASK_SUCCESS_VISIBLE_TIME_MS);
});

const setCweId = (state, { payload: { value } }) => {
  state.customCweIdInput = userInput(value.length === 0 && state.isEditMode ? null : validateCweIds, value);
  state.validationError = value.length === 0 && state.isEditMode ? null : validateCweIds(value);
  computeIsDirty(state);
};

const setAuditComment = (state, { payload: { value } }) => {
  state.auditCommentInput = userInput(null, value);
  computeIsDirty(state);
};

const setScope = (state, { payload: { evt, appCategoriesByOwners } }) => {
  const { selectedIndex, options } = evt.currentTarget;
  state.customCweIdScopeInput = userSelectInput(options[selectedIndex].value);

  const appCategoriesFromSelectedScope = appCategoriesByOwners.find(
    ({ ownerId }) => ownerId === options[selectedIndex].value
  );

  state.appCategoriesFromSelectedScope = appCategoriesFromSelectedScope?.applicationCategories;
  state.selectedAppCategories = [];

  computeIsDirty(state);
};

const setAppCategories = (state, { payload: appCategoryId }) => {
  state.selectedAppCategories = state.selectedAppCategories.includes(appCategoryId)
    ? without(appCategoryId, state.selectedAppCategories)
    : append(appCategoryId, state.selectedAppCategories);

  computeIsDirty(state);
};

const cweId = createSlice({
  name: REDUCER_NAME,
  initialState,
  reducers: {
    openModal: propSet('isModalOpen', true),
    closeModal,
    setCweId,
    setAuditComment,
    setScope,
    setAppCategories,
    closeUnsavedChangesModal,
    loadCweIdModal,
  },
  extraReducers: {
    [saveCweId.pending]: propSet('submitMaskState', false),
    [saveCweId.fulfilled]: requestFulfilled,
    [saveCweId.rejected]: requestFailed,
  },
});

export default cweId.reducer;
export const actions = {
  ...cweId.actions,
  saveCweId,
};
