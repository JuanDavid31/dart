/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import {
  NxPageTitle,
  NxH1,
  NxH2,
  NxH3,
  NxTile,
  NxPageMain,
  NxFontAwesomeIcon,
  NxButton,
  NxList,
  NxTag,
  NxP,
  NxLoadWrapper,
  NxTooltip,
  NxReadOnly,
} from '@sonatype/react-shared-components';
import { faPlus, faCube, faPen } from '@fortawesome/free-solid-svg-icons';
import MenuBarBackButton from 'MainRoot/mainHeader/MenuBar/MenuBarBackButton';
import { selectRouterCurrentParams } from 'MainRoot/reduxUiRouter/routerSelectors';
import RemediationModal from 'MainRoot/vulnerabilityCustomize/remediationModal/RemediationModal';
import CweIdModal from 'MainRoot/vulnerabilityCustomize/cweIdModal/CweIdModal';
import CvssVectorStringModal from 'MainRoot/vulnerabilityCustomize/cvssVectorStringModal/CvssVectorStringModal';
import CvssSeverityModal from 'MainRoot/vulnerabilityCustomize/cvssSeverityModal/CvssSeverityModal';
import { actions as remediationModalActions } from 'MainRoot/vulnerabilityCustomize/remediationModal/remediationModalSlice';
import { actions as cweIdModalActions } from 'MainRoot/vulnerabilityCustomize/cweIdModal/cweIdModalSlice';
import { actions as cvssVectorModalActions } from 'MainRoot/vulnerabilityCustomize/cvssVectorStringModal/cvssVectorStringModalSlice';
import { actions as cvssSeverityModalActions } from 'MainRoot/vulnerabilityCustomize/cvssSeverityModal/cvssSeverityModalSlice';
import { selectVulnerabilityCustomize } from 'MainRoot/vulnerabilityCustomize/vulnerabilityCustomizeSelectors';
import { actions } from 'MainRoot/vulnerabilityCustomize/vulnerabilityCustomizeSlice';
import { isNilOrEmpty } from 'MainRoot/util/jsUtil';
import { useRouterState } from 'MainRoot/react/RouterStateContext';

const EMPTY_MESSAGE = 'None Added';

export default function VulnerabilityCustomize() {
  const {
    loading,
    loadError,
    vulnerabilityDetails,
    componentDisplayName,
    customRemediation,
    originalCweId,
    customCweId,
    originalCvssVector,
    customCvssVector,
    originalCvssSeverity,
    customCvssSeverity,
  } = useSelector(selectVulnerabilityCustomize);
  const uiRouterState = useRouterState();
  const dispatch = useDispatch();

  const openRemediationModal = () => dispatch(remediationModalActions.openModal());
  const openCweIdModal = () => dispatch(cweIdModalActions.openModal());
  const openCvssVectorModal = () => dispatch(cvssVectorModalActions.openModal());
  const openCvssSeverityModal = () => dispatch(cvssSeverityModalActions.openModal());
  const { refId } = useSelector(selectRouterCurrentParams);

  const doLoad = () => dispatch(actions.loadVulnerabilityCustomize());
  const routerParams = useSelector(selectRouterCurrentParams);
  const tabId = routerParams.tabId;
  const isFirewall = routerParams.isFirewall;
  const isRepository = routerParams.isRepository;
  const repositoryId = routerParams.repositoryId;
  const matchState = routerParams.matchState;
  const pathname = routerParams.pathname;
  const componentIdentifier = routerParams.componentIdentifier;

  let backUrl;
  let backButtonText;
  if (isFirewall) {
    backUrl = uiRouterState.href(`firewall.componentDetailsPage.${tabId ? tabId : 'security'}`, {
      componentIdentifier,
      componentHash: routerParams.componentHash,
      repositoryId,
      componentDisplayName,
      matchState,
      pathname,
    });
    backButtonText = 'Back to Firewall Vulnerability Details';
  } else if (isRepository) {
    backUrl = uiRouterState.href(`repository.componentDetailsPage.${tabId ? tabId : 'security'}`, {
      componentIdentifier,
      componentHash: routerParams.componentHash,
      repositoryId,
      componentDisplayName,
      matchState,
      pathname,
    });
    backButtonText = 'Back to Repository Vulnerability Details';
  } else {
    backUrl = uiRouterState.href(`applicationReport.componentDetails.${tabId ? tabId : 'security'}`, {
      publicId: routerParams.ownerId,
      scanId: routerParams.scanId,
      hash: routerParams.componentHash,
    });
    backButtonText = 'Back to Violation Details';
  }

  useEffect(() => {
    doLoad();
  }, []);

  return (
    <NxPageMain>
      <MenuBarBackButton text={backButtonText} href={backUrl} />
      <NxPageTitle>
        <NxH1>Customize Vulnerability Details</NxH1>
      </NxPageTitle>
      <NxTile>
        <NxTile.Header>
          <NxTile.HeaderTitle>
            <NxH2>{refId}</NxH2>
          </NxTile.HeaderTitle>

          <NxTile.HeaderTags>
            {vulnerabilityDetails?.researchType === 'DEEP_DIVE' && (
              <NxTooltip title="Detailed vulnerability data augmented with recommendations, researched by Sonatype.">
                <NxTag color="sky">Deep Dive</NxTag>
              </NxTooltip>
            )}
            {vulnerabilityDetails?.isAdvancedVulnerabilityDetection && (
              <NxTooltip title="Vulnerabilities detected in entire files and embedded dependencies, typically beyond the public feeds.">
                <NxTag color="turquoise">Advanced Vulnerability Detection</NxTag>
              </NxTooltip>
            )}
          </NxTile.HeaderTags>
        </NxTile.Header>

        {componentDisplayName && (
          <NxP>
            <NxFontAwesomeIcon icon={faCube} />
            {componentDisplayName}
          </NxP>
        )}
      </NxTile>

      <NxLoadWrapper loading={loading} error={loadError} retryHandler={doLoad}>
        <NxTile>
          <NxTile.Header>
            <NxTile.Headings>
              <NxTile.HeaderTitle>
                <NxH2>Remediation Message</NxH2>
              </NxTile.HeaderTitle>
            </NxTile.Headings>
            <NxTile.HeaderActions>
              <NxButton variant="tertiary" onClick={openRemediationModal}>
                <NxFontAwesomeIcon icon={customRemediation?.remediation ? faPen : faPlus} />
                <span>{customRemediation?.remediation ? 'Edit' : 'Add'} Remediation Message</span>
              </NxButton>
            </NxTile.HeaderActions>
          </NxTile.Header>

          {!customRemediation?.remediation ? (
            <NxList id="empty-custom-remediation" emptyMessage={EMPTY_MESSAGE} />
          ) : (
            <NxTile.Subsection>
              <NxReadOnly>
                <NxReadOnly.Label>Custom Remediation</NxReadOnly.Label>
                <NxReadOnly.Data id="custom-remediation-message">{customRemediation.remediation}</NxReadOnly.Data>
              </NxReadOnly>
              <NxReadOnly>
                <NxReadOnly.Label>Scope</NxReadOnly.Label>
                <NxReadOnly.Data id="custom-remediation-scope">
                  {`${customRemediation.ownerLabel} - ${customRemediation.ownerName}`}
                </NxReadOnly.Data>
              </NxReadOnly>
              {!isNilOrEmpty(customRemediation.applicationCategories) && (
                <NxReadOnly id="custom-remediation-categories">
                  <NxReadOnly.Label>Application Categories Selected</NxReadOnly.Label>
                  {customRemediation.applicationCategories.map((category) => (
                    <NxReadOnly.Data key={`custom-remediation-category-${category.id}`}>
                      {category.name}
                    </NxReadOnly.Data>
                  ))}
                </NxReadOnly>
              )}
            </NxTile.Subsection>
          )}
        </NxTile>

        <NxTile>
          <NxTile.Header>
            <NxTile.Headings>
              <NxTile.HeaderTitle>
                <NxH2>CWE ID</NxH2>
              </NxTile.HeaderTitle>
            </NxTile.Headings>
            <NxTile.HeaderActions>
              <NxButton variant="tertiary" onClick={openCweIdModal}>
                <NxFontAwesomeIcon icon={faPen} />
                <span>Customize CWE ID</span>
              </NxButton>
            </NxTile.HeaderActions>
          </NxTile.Header>

          <NxTile.Subsection>
            <NxH3>Original CWE ID</NxH3>
            <NxP id="original-cwe-id">CWE: {originalCweId}</NxP>
            {customCweId?.cweId && (
              <>
                <NxReadOnly>
                  <NxReadOnly.Label>Custom CWE ID</NxReadOnly.Label>
                  <NxReadOnly.Data id="custom-cwe-id">CWE: {customCweId.cweId}</NxReadOnly.Data>
                </NxReadOnly>
                <NxReadOnly>
                  <NxReadOnly.Label>Scope</NxReadOnly.Label>
                  <NxReadOnly.Data id="custom-cwe-scope">
                    {`${customCweId.ownerLabel} - ${customCweId.ownerName}`}
                  </NxReadOnly.Data>
                </NxReadOnly>
                {!isNilOrEmpty(customCweId.applicationCategories) && (
                  <NxReadOnly id="custom-cwe-categories">
                    <NxReadOnly.Label>Application Categories Selected</NxReadOnly.Label>
                    {customCweId.applicationCategories.map((category) => (
                      <NxReadOnly.Data key={`custom-cwe-category-${category.id}`}>{category.name}</NxReadOnly.Data>
                    ))}
                  </NxReadOnly>
                )}
              </>
            )}
          </NxTile.Subsection>
        </NxTile>

        <NxTile>
          <NxTile.Header>
            <NxTile.Headings>
              <NxTile.HeaderTitle>
                <NxH2>CVSS Vector String</NxH2>
              </NxTile.HeaderTitle>
            </NxTile.Headings>
            <NxTile.HeaderActions>
              <NxButton variant="tertiary" onClick={openCvssVectorModal}>
                <NxFontAwesomeIcon icon={faPen} />
                <span>Customize CVSS Vector String</span>
              </NxButton>
            </NxTile.HeaderActions>
          </NxTile.Header>
          <NxTile.Subsection>
            <NxReadOnly>
              <NxReadOnly.Label>Original Vector String</NxReadOnly.Label>
              <NxReadOnly.Data id="original-cvss-vector-string">{originalCvssVector}</NxReadOnly.Data>
            </NxReadOnly>
            {customCvssVector?.vector && (
              <>
                <NxReadOnly>
                  <NxReadOnly.Label>Custom Vector String</NxReadOnly.Label>
                  <NxReadOnly.Data id="custom-cvss-vector-string">{customCvssVector.vector}</NxReadOnly.Data>
                </NxReadOnly>
                <NxReadOnly>
                  <NxReadOnly.Label>Scope</NxReadOnly.Label>
                  <NxReadOnly.Data id="custom-cvss-vector-string-scope">
                    {`${customCvssVector.ownerLabel} - ${customCvssVector.ownerName}`}
                  </NxReadOnly.Data>
                </NxReadOnly>
                {!isNilOrEmpty(customCvssVector.applicationCategories) && (
                  <NxReadOnly id="custom-cvss-vector-string-categories">
                    <NxReadOnly.Label>Application Categories Selected</NxReadOnly.Label>
                    {customCvssVector.applicationCategories.map((category) => (
                      <NxReadOnly.Data key={`custom-cvss-vector-string-category-${category.id}`}>
                        {category.name}
                      </NxReadOnly.Data>
                    ))}
                  </NxReadOnly>
                )}
              </>
            )}
          </NxTile.Subsection>
        </NxTile>

        <NxTile>
          <NxTile.Header>
            <NxTile.Headings>
              <NxTile.HeaderTitle>
                <NxH2>CVSS Severity</NxH2>
              </NxTile.HeaderTitle>
            </NxTile.Headings>
            <NxTile.HeaderActions>
              <NxButton variant="tertiary" onClick={openCvssSeverityModal}>
                <NxFontAwesomeIcon icon={faPen} />
                <span>Customize CVSS Severity</span>
              </NxButton>
            </NxTile.HeaderActions>
          </NxTile.Header>
          <NxTile.Subsection>
            <NxReadOnly>
              <NxReadOnly.Label>Original CVSS Severity</NxReadOnly.Label>
              <NxReadOnly.Data id="original-cvss-severity">{Number(originalCvssSeverity).toFixed(1)}</NxReadOnly.Data>
            </NxReadOnly>
            {customCvssSeverity?.severity?.toString() && (
              <>
                <NxReadOnly>
                  <NxReadOnly.Label>Custom CVSS Severity</NxReadOnly.Label>
                  <NxReadOnly.Data id="custom-cvss-severity">
                    {Number(customCvssSeverity.severity).toFixed(1)}
                  </NxReadOnly.Data>
                </NxReadOnly>
                <NxReadOnly>
                  <NxReadOnly.Label>Scope</NxReadOnly.Label>
                  <NxReadOnly.Data id="custom-cvss-severity-scope">
                    {`${customCvssSeverity.ownerLabel} - ${customCvssSeverity.ownerName}`}
                  </NxReadOnly.Data>
                </NxReadOnly>
                {!isNilOrEmpty(customCvssSeverity.applicationCategories) && (
                  <NxReadOnly id="custom-cvss-severity-categories">
                    <NxReadOnly.Label>Application Categories Selected</NxReadOnly.Label>
                    {customCvssSeverity.applicationCategories.map((category) => (
                      <NxReadOnly.Data key={`custom-cvss-severity-category-${category.id}`}>
                        {category.name}
                      </NxReadOnly.Data>
                    ))}
                  </NxReadOnly>
                )}
              </>
            )}
          </NxTile.Subsection>
        </NxTile>
      </NxLoadWrapper>
      <RemediationModal />
      <CweIdModal />
      <CvssVectorStringModal />
      <CvssSeverityModal />
    </NxPageMain>
  );
}
