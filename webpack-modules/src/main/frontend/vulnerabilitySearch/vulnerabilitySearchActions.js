/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import axios from 'axios';

import { noPayloadActionCreator, payloadParamActionCreator } from '../util/reduxUtil';
import { getVulnerabilityJsonDetailUrl } from '../util/CLMLocation';
import { stateGo } from '../reduxUiRouter/routerActions';

export const LOAD_VULNERABILITY_REQUESTED = 'LOAD_VULNERABILITY_REQUESTED';
export const LOAD_VULNERABILITY_FULFILLED = 'LOAD_VULNERABILITY_FULFILLED';
export const LOAD_VULNERABILITY_FAILED = 'LOAD_VULNERABILITY_FAILED';
export const VULNERABILITY_INPUT_CHANGE = 'VULNERABILITY_INPUT_CHANGE';
export const CLEAR_VULNERABILITY = 'CLEAR_VULNERABILITY';

const loadVulnerabilityRequested = noPayloadActionCreator(LOAD_VULNERABILITY_REQUESTED);
const loadVulnerabilityFulfilled = payloadParamActionCreator(LOAD_VULNERABILITY_FULFILLED);
const loadVulnerabilityFailed = payloadParamActionCreator(LOAD_VULNERABILITY_FAILED);

export const vulnerabilityInputChange = payloadParamActionCreator(VULNERABILITY_INPUT_CHANGE);

export const clearVulnerabilityDetails = noPayloadActionCreator(CLEAR_VULNERABILITY);

export function loadVulnerability(id) {
  return (dispatch) => {
    if (!id) {
      return dispatch(loadVulnerabilityFailed('Missing vulnerability id.'));
    }
    dispatch(loadVulnerabilityRequested());

    const url = getVulnerabilityJsonDetailUrl(id);

    return axios
      .get(url)
      .then((results) => dispatch(loadVulnerabilityFulfilled(results.data)))
      .catch((error) => dispatch(loadVulnerabilityFailed(error)));
  };
}

export function searchVulnerability() {
  return (dispatch, getState) => {
    const { inputState } = getState().vulnerabilitySearch;
    const id = inputState && inputState.value && inputState.value.trim();
    if (id) {
      dispatch(stateGo('vulnerabilitySearchDetail', { id }));
    }
  };
}
