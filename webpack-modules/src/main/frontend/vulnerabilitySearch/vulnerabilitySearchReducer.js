/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */

import { createReducerFromActionMap } from '../util/reduxUtil';
import {
  userInput,
  initialState as initInputState,
} from '@sonatype/react-shared-components/components/NxTextInput/stateHelpers';
import {
  LOAD_VULNERABILITY_REQUESTED,
  LOAD_VULNERABILITY_FULFILLED,
  LOAD_VULNERABILITY_FAILED,
  VULNERABILITY_INPUT_CHANGE,
  CLEAR_VULNERABILITY,
} from './vulnerabilitySearchActions';

const initialState = Object.freeze({
  loading: false,
  loadError: null, // should be an error object generated by axios when not null
  vulnerabilityDetails: null,
  inputState: Object.freeze(initInputState('')),
  searchEnabled: false,
});

/**
 * Maps ActionTypes to Reducer functions
 */
const reducerActionMap = {
  [VULNERABILITY_INPUT_CHANGE]: setInputValue,
  [LOAD_VULNERABILITY_REQUESTED]: setLoading,
  [LOAD_VULNERABILITY_FAILED]: setLoadError,
  [LOAD_VULNERABILITY_FULFILLED]: setVulnerabilityDetails,
  [CLEAR_VULNERABILITY]: clearVulnerability,
};

function clearVulnerability() {
  return initialState;
}

function setInputValue(payload, state) {
  const inputState = userInput(null, payload);
  const value = inputState && inputState.value && inputState.value.trim();
  return {
    ...state,
    inputState,
    searchEnabled: !!value,
  };
}

function setLoading(payload, state) {
  return {
    ...state,
    loading: true,
    loadError: null,
    vulnerabilityDetails: null,
  };
}

function setVulnerabilityDetails(vulnerabilityDetails, state) {
  return {
    ...state,
    vulnerabilityDetails,
    loading: false,
    loadError: null,
  };
}

function setLoadError(loadError, state) {
  return {
    ...state,
    loadError,
    loading: false,
  };
}

/**
 * Main reducer function for this file.
 * Looks up the action by type and then executes using the payload and the state.
 */
const vulnerabilitySearchReducer = createReducerFromActionMap(reducerActionMap, initialState);
export default vulnerabilitySearchReducer;
