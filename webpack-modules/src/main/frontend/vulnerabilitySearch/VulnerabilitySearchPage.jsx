/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import React, { Component, Fragment } from 'react';
import * as PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { pick } from 'ramda';
import { NxInfoAlert } from '@sonatype/react-shared-components';
import IqVulnerabilityDetails from 'MainRoot/react/IqVulnerabilityDetails/IqVulnerabilityDetails';

import LoadWrapper from '../react/LoadWrapper';
import VulnerabilitySearchBar from './VulnerabilitySearchBar';
import {
  loadVulnerability,
  vulnerabilityInputChange,
  searchVulnerability,
  clearVulnerabilityDetails,
} from './vulnerabilitySearchActions';

function mapStateToProps({ vulnerabilitySearch, router, user }) {
  return {
    ...pick(['loading', 'loadError', 'vulnerabilityDetails', 'inputState', 'searchEnabled'], vulnerabilitySearch),
    ...pick(['id'], router.currentParams),
    ...pick(['currentUser'], user),
  };
}

class VulnerabilitySearchPage extends Component {
  constructor(props) {
    super(props);
    if (!props.id) {
      props.clearVulnerabilityDetails();
    }

    this.doLoad = this.doLoad.bind(this);
  }

  doLoad() {
    if (this.props.id) {
      this.props.loadVulnerability(this.props.id);
    }
  }

  componentDidMount() {
    this.doLoad();
  }

  componentDidUpdate(prevProps) {
    if (this.props.currentUser !== prevProps.currentUser) {
      this.doLoad();
    }
  }

  render() {
    const {
      vulnerabilityDetails,
      loading,
      loadError,
      vulnerabilityInputChange,
      inputState,
      searchVulnerability,
      searchEnabled,
      currentUser,
      id,
    } = this.props;

    const is404or400 =
        loadError && loadError.response && (loadError.response.status === 404 || loadError.response.status === 400),
      searchBar = (
        <VulnerabilitySearchBar
          inputState={inputState}
          vulnerabilityInputChange={vulnerabilityInputChange}
          searchVulnerability={searchVulnerability}
          searchEnabled={searchEnabled}
        />
      ),
      notFoundAlert = <NxInfoAlert id="vuln-lookup-not-found">Vulnerability {id} not found.</NxInfoAlert>;

    return (
      <div id="vulnerability-search" className="nx-page-main">
        <header className="nx-page-title">
          <h1 className="nx-h1">Vulnerability Lookup</h1>
        </header>
        <section className="nx-tile iq-vuln-lookup-tile">
          <header className="nx-tile-header">
            <div className="nx-tile-header__title">
              <h2 className="nx-h2">Find Results on Specific Vulnerabilities</h2>
            </div>
          </header>
          <div className="nx-tile-content">
            <p className="nx-p">All vulnerability lookups must use an exact match to surface a result.</p>
            {searchBar}
            {is404or400 ? (
              <section className="nx-tile-subsection">{notFoundAlert}</section>
            ) : (
              <LoadWrapper loading={loading} error={loadError} retryHandler={this.doLoad}>
                {vulnerabilityDetails && (
                  <section className="nx-tile-subsection">
                    <Fragment>
                      {!currentUser && (
                        <NxInfoAlert id="vuln-lookup-redaction-warning">
                          You are currently viewing a redacted version of the results. To see the full information
                          provided please login to IQ Server with your credentials or contact your administrator for
                          access.
                        </NxInfoAlert>
                      )}
                      <IqVulnerabilityDetails vulnerabilityDetails={vulnerabilityDetails} />
                    </Fragment>
                  </section>
                )}
              </LoadWrapper>
            )}
          </div>
        </section>
      </div>
    );
  }
}

const mapDispatchToProps = {
  loadVulnerability,
  vulnerabilityInputChange,
  searchVulnerability,
  clearVulnerabilityDetails,
};
export default connect(mapStateToProps, mapDispatchToProps)(VulnerabilitySearchPage);

VulnerabilitySearchPage.propTypes = {
  vulnerabilityInputChange: PropTypes.func.isRequired,
  searchVulnerability: PropTypes.func.isRequired,
  loadVulnerability: PropTypes.func.isRequired,
  loading: PropTypes.bool,
  loadError: LoadWrapper.propTypes.error,
  vulnerabilityDetails: PropTypes.oneOfType([
    IqVulnerabilityDetails.propTypes.vulnerabilityDetails,
    PropTypes.oneOf([null]),
  ]),
  id: PropTypes.string,
  hash: PropTypes.string,
  componentIdentifier: PropTypes.string,
  inputState: VulnerabilitySearchBar.propTypes.inputState,
  searchEnabled: PropTypes.bool.isRequired,
  clearVulnerabilityDetails: PropTypes.func.isRequired,
  currentUser: PropTypes.any, // opaque as far as this component is concerned
};
