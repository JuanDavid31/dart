/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import React, { useEffect } from 'react';
import classnames from 'classnames';
import * as PropTypes from 'prop-types';
import { NxButton, NxModal } from '@sonatype/react-shared-components';
import IqVulnerabilityDetails from 'MainRoot/react/IqVulnerabilityDetails/IqVulnerabilityDetails';
import LoadWrapper from '../react/LoadWrapper';

export default function VulnerabilityDetailsModal(props) {
  const {
      componentIdentifier,
      loading,
      loadError,
      loadVulnerability,
      onClose,
      extraQueryParameters,
      vulnerabilityDetails,
      vulnerabilityId,
      wide,
    } = props,
    classes = classnames({ 'nx-modal--wide': wide == null ? true : wide });

  const load = () => {
    if (vulnerabilityId) {
      loadVulnerability(vulnerabilityId, componentIdentifier, extraQueryParameters);
    }
  };

  useEffect(load, [vulnerabilityId, componentIdentifier, extraQueryParameters]);

  return (
    <NxModal id="vulnerability-details-modal" className={classes} onClose={onClose}>
      <header className="nx-modal-header">
        <h3>Vulnerability Information</h3>
      </header>
      <div className="nx-modal-content">
        <LoadWrapper loading={loading} error={loadError} retryHandler={load}>
          {vulnerabilityDetails && <IqVulnerabilityDetails vulnerabilityDetails={vulnerabilityDetails} />}
        </LoadWrapper>
      </div>
      <footer className="nx-footer">
        <div className="nx-btn-bar">
          <NxButton type="button" onClick={onClose} className="nx-btn" id="close-vulnerability-modal-btn">
            Close
          </NxButton>
        </div>
      </footer>
    </NxModal>
  );
}

VulnerabilityDetailsModal.propTypes = {
  componentIdentifier: PropTypes.object,
  onClose: PropTypes.func.isRequired,
  loading: PropTypes.bool,
  loadError: LoadWrapper.propTypes.error,
  loadVulnerability: PropTypes.func.isRequired,
  wide: PropTypes.bool,
  extraQueryParameters: PropTypes.shape({
    identificationSource: PropTypes.string,
    scanId: PropTypes.string,
    ownerId: PropTypes.string,
    ownerType: PropTypes.string,
  }),
  vulnerabilityId: PropTypes.string,
  vulnerabilityDetails: PropTypes.oneOfType([
    IqVulnerabilityDetails.propTypes.vulnerabilityDetails,
    PropTypes.oneOf([null]),
  ]),
};
