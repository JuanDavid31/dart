/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import { always } from 'ramda';
import { createReducerFromActionMap } from '../util/reduxUtil';
import {
  OPEN_VULNERABILITY_DETAILS_MODAL,
  CLOSE_VULNERABILITY_DETAILS_MODAL,
  FETCH_VULNERABILITY_DETAILS_FOR_MODAL_REQUESTED,
  FETCH_VULNERABILITY_DETAILS_FOR_MODAL_FULFILLED,
  FETCH_VULNERABILITY_DETAILS_FOR_MODAL_FAILED,
} from './vulnerabilityDetailsModalActions';

const initialState = Object.freeze({
  componentIdentifier: null,
  loading: false,
  vulnerabilityId: null,
  vulnerabilityDetails: null,
  loadError: null,
  extraQueryParameters: null,
});

const reducerActionMap = {
  [OPEN_VULNERABILITY_DETAILS_MODAL]: openModal,
  [CLOSE_VULNERABILITY_DETAILS_MODAL]: always(initialState),
  [FETCH_VULNERABILITY_DETAILS_FOR_MODAL_REQUESTED]: requestVulnerabilityDetails,
  [FETCH_VULNERABILITY_DETAILS_FOR_MODAL_FULFILLED]: loadVulnerabilityDetails,
  [FETCH_VULNERABILITY_DETAILS_FOR_MODAL_FAILED]: setLoadError,
};

function openModal({ vulnerabilityId, componentIdentifier = null, extraQueryParameters = null }, state) {
  return {
    ...state,
    vulnerabilityId,
    componentIdentifier,
    extraQueryParameters,
  };
}

function requestVulnerabilityDetails(payload, state) {
  return {
    ...state,
    loading: true,
    vulnerabilityDetails: null,
    loadError: null,
  };
}

function loadVulnerabilityDetails(vulnerabilityDetails, state) {
  return {
    ...state,
    loading: false,
    vulnerabilityDetails,
    loadError: null,
  };
}

function setLoadError(error, state) {
  return {
    ...state,
    loading: false,
    vulnerabilityDetails: null,
    loadError: error,
  };
}

const vulnerabilityDetailsModalReducer = createReducerFromActionMap(reducerActionMap, initialState);
export default vulnerabilityDetailsModalReducer;
