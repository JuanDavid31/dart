/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import React from 'react';
import PropTypes from 'prop-types';
import SbomVulnerabilityDetails from './SbomVulnerabilityDetails';
import IqPopover, { IqPopoverHeaderTitleText } from 'MainRoot/react/IqPopover/IqPopover';
import { useSelector } from 'react-redux';
import {
  selectComponentVulnerabilityDetails,
  selectLoadingVulnerabilityDetails,
  selectLoadVulnerabilityDetailsError,
} from 'MainRoot/sbomManager/features/componentDetails/componentDetailsSelector';
import cx from 'classnames';
import { NxButton, NxFontAwesomeIcon, NxLoadWrapper } from '@sonatype/react-shared-components';
import { faClose } from '@fortawesome/pro-light-svg-icons/faClose';
import { isNilOrEmpty } from 'MainRoot/util/jsUtil';
import './SbomVulnerabilityDetailsPopover.scss';

export default function SbomVulnerabilityDetailsPopover({
  componentIdentifier,
  componentName,
  showVulnerabilityDetailPopover,
  vulnerabilityRefId,
  toggleVulnerabilityPopoverWithEffects,
  reloadFunction,
}) {
  const onClose = () => toggleVulnerabilityPopoverWithEffects();
  const isVulnerabilityDetailsLoading = useSelector(selectLoadingVulnerabilityDetails);
  const errorLoadVulnerabilities = useSelector(selectLoadVulnerabilityDetailsError);
  const vulnerabilityDetailsLoadedData = useSelector(selectComponentVulnerabilityDetails);

  return !showVulnerabilityDetailPopover ? null : (
    <IqPopover size="large" onClose={onClose} id="sbom-component-details-vulnerability-details-popover">
      <SbomIqPopoverHeader
        id="vulnerability-detail-header"
        className="vulnerability-detail-header"
        buttonId="vulnerability-close-btn"
        onClose={onClose}
        headerTitle={`Vulnerability Details ${vulnerabilityRefId}`}
      />
      <NxLoadWrapper
        loading={isVulnerabilityDetailsLoading}
        error={errorLoadVulnerabilities}
        retryHandler={reloadFunction}
      >
        {!isNilOrEmpty(vulnerabilityDetailsLoadedData) && (
          <SbomVulnerabilityDetails
            componentName={componentName}
            componentIdentifier={componentIdentifier}
            vulnerabilityDetails={vulnerabilityDetailsLoadedData}
          />
        )}
      </NxLoadWrapper>
    </IqPopover>
  );
}

SbomVulnerabilityDetailsPopover.propTypes = {
  componentIdentifier: PropTypes.object,
  showVulnerabilityDetailPopover: PropTypes.bool.isRequired,
  componentName: PropTypes.string,
  vulnerabilityRefId: PropTypes.string,
  toggleVulnerabilityPopoverWithEffects: PropTypes.func.isRequired,
  reloadFunction: PropTypes.func,
};

export const SbomIqPopoverHeader = (props) => {
  const {
    children,
    className,
    onClose,
    buttonId,
    headerSize,
    headerTitle,
    buttonClassnames,
    closeTitle,
    ...otherProps
  } = props;

  const btnClasses = cx('iq-popover-header__close-btn', buttonClassnames);
  const btnTitle = closeTitle || 'Close';

  return (
    <header className={cx('iq-popover__header', className)} {...otherProps}>
      <div className="iq-popover-header__title">
        <IqPopoverHeaderTitleText headerSize={headerSize} headerTitle={headerTitle} />
        <NxButton className={btnClasses} onClick={onClose} variant="icon-only" title={btnTitle} id={buttonId}>
          <NxFontAwesomeIcon icon={faClose} />
        </NxButton>
      </div>
      {children}
    </header>
  );
};

SbomIqPopoverHeader.propTypes = {
  ...IqPopoverHeaderTitleText.propTypes,
  children: PropTypes.node,
  onClose: PropTypes.func.isRequired,
  buttonId: PropTypes.string,
  buttonClassnames: PropTypes.string,
  closeTitle: PropTypes.string,
  className: PropTypes.string,
};
