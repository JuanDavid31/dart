/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import React from 'react';
import * as PropTypes from 'prop-types';
import { all, filter, isEmpty, isNil, map, pipe } from 'ramda';

import DetailLink from './DetailLink';
import RenderDetail from './RenderDetail';
import SubDescriptionList from './SubDescriptionList';

const referenceTypeDescriptionMap = {
  PROJECT: 'Project',
  ATTACK: 'Attack',
  THIRD_PARTY: 'Third Party',
  EVIDENCE: 'Evidence',
  UNKNOWN: 'Unknown',
};

function hasAllData({ referenceType, url }) {
  return !!(referenceType && url);
}

function renderLinkWithLabel({ referenceType, url }) {
  return referenceType && url ? (
    <SubDescriptionList.Container key={`${referenceType}:${url}`}>
      <SubDescriptionList.Term>{referenceTypeDescriptionMap[referenceType]}</SubDescriptionList.Term>
      <SubDescriptionList.Desc>
        <DetailLink href={url}>{url}</DetailLink>
      </SubDescriptionList.Desc>
    </SubDescriptionList.Container>
  ) : null;
}

const renderWithTypeLabels = (links) => {
  const renderedLinks = pipe(filter(hasAllData), map(renderLinkWithLabel))(links);
  return isEmpty(renderedLinks) ? null : <SubDescriptionList>{renderedLinks}</SubDescriptionList>;
};

function renderPlainLink({ url }) {
  return url ? (
    <DetailLink key={url} className="nx-truncate-ellipsis" href={url}>
      {url}
    </DetailLink>
  ) : null;
}

const renderPlainLinks = pipe(filter(hasAllData), map(renderPlainLink));

const hasUnknownType = ({ referenceType }) => {
  const typeEnum = referenceType && referenceTypeDescriptionMap[referenceType];
  return isNil(typeEnum) || typeEnum === 'Unknown';
};

const allTypesUnknown = all(hasUnknownType);

function renderReferenceLinks(links) {
  return allTypesUnknown(links) ? renderPlainLinks(links) : renderWithTypeLabels(links);
}

const AdvisoriesDetail = function AdvisoriesDetail({ advisories }) {
  const referenceLinks = advisories && renderReferenceLinks(advisories);
  return isNil(referenceLinks) || isEmpty(referenceLinks) ? null : (
    <RenderDetail title="Advisories">{referenceLinks}</RenderDetail>
  );
};

AdvisoriesDetail.propTypes = {
  advisories: PropTypes.arrayOf(
    PropTypes.shape({
      referenceType: PropTypes.string,
      url: PropTypes.string,
    }).isRequired
  ),
};

export default AdvisoriesDetail;
