/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import React from 'react';
import { any, eqBy, toLower } from 'ramda';

import MarkdownDetail from './details/MarkdownDetail';
import IssueDetail from './details/IssueDetail';
import SeverityDetail from './details/SeverityDetail';
import WeaknessDetail from './details/WeaknessDetail';
import SourceDetail from './details/SourceDetail';
import CategoriesDetail from './details/CategoriesDetail';
import DescriptionDetail from './details/DescriptionDetail';
import AdvisoriesDetail from './details/AdvisoriesDetail';
import CVSSDetail from './details/CVSSDetail';
import RootCauseDetail from './details/RootCauseDetail';
import VulnerableVersionRangesDetail from './details/VulnerableVersionRangesDetail';
import './IqVulnerabilityDetails.scss';
import { propTypes } from './IqVulnerabilityDetailsPropTypes';
import { NxFontAwesomeIcon, NxH2, NxTag, NxTooltip, NxInfoAlert, NxH3, NxP } from '@sonatype/react-shared-components';
import { faCube } from '@fortawesome/free-solid-svg-icons';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { useRouterState } from 'MainRoot/react/RouterStateContext';

const MALICIOUS_CODE = 'malicious_code';

const IqVulnerabilityDetails = ({
  vulnerabilityDetails,
  componentName,
  componentIdentifier,
  ownerType,
  ownerId,
  showCustomizeButton,
  componentHash,
  tabId,
  repositoryId,
  matchState,
  pathname,
  isFirewall,
}) => {
  const uiRouterState = useRouterState();
  const categories = vulnerabilityDetails.categories || [],
    hasMaliciousCodeCategory = any(eqBy(toLower, MALICIOUS_CODE), categories),
    maliciousCodeWarning = hasMaliciousCodeCategory ? 'Malicious Code' : null;

  let urlVulnerabilityCustomize = null;

  const customizeApplicationUrlRedirection = uiRouterState.href('applicationReport.vulnerabilityCustomize', {
    ownerType: ownerType,
    ownerId: ownerId,
    refId: vulnerabilityDetails?.identifier,
    componentIdentifier: componentIdentifier ? JSON.stringify(componentIdentifier) : null,
    componentHash,
    tabId,
  });

  const customizeFirewallUrlRedirection = uiRouterState.href('firewall.vulnerabilityCustomize', {
    ownerType: ownerType,
    ownerId: ownerId,
    refId: vulnerabilityDetails?.identifier,
    componentIdentifier: componentIdentifier ? JSON.stringify(componentIdentifier) : null,
    componentHash,
    tabId,
    isFirewall: true,
    repositoryId,
    matchState,
    componentDisplayName: componentName,
    pathname,
  });

  const customizeRepositoryUrlRedirection = uiRouterState.href('repository.vulnerabilityCustomize', {
    ownerType: ownerType,
    ownerId: ownerId,
    refId: vulnerabilityDetails?.identifier,
    componentIdentifier: componentIdentifier ? JSON.stringify(componentIdentifier) : null,
    componentHash,
    tabId,
    isRepository: true,
    repositoryId,
    matchState,
    componentDisplayName: componentName,
    pathname,
  });

  if (showCustomizeButton && ownerType && ownerId) {
    const getFirewallRepositoryUrlRedirection = () =>
      isFirewall ? customizeFirewallUrlRedirection : customizeRepositoryUrlRedirection;
    urlVulnerabilityCustomize =
      ownerType === 'application' ? customizeApplicationUrlRedirection : getFirewallRepositoryUrlRedirection();
  }

  return (
    <div className="iq-vulnerability-details">
      <NxH2
        className={classnames(
          componentName ? 'iq-vulnerability-details__no-bottom-margin' : null,
          urlVulnerabilityCustomize
            ? 'iq-vulnerability-details__h2-identifier-labels-button-container-button-present'
            : 'iq-vulnerability-details__h2-no-customize-button'
        )}
      >
        <span className="iq-vulnerability-details__vulnerability-id-and-conditional-labels">
          <span className="iq-vulnerability-details__vulnerability-id">{vulnerabilityDetails.identifier}</span>
          {vulnerabilityDetails.researchType === 'DEEP_DIVE' && (
            <NxTooltip title="Detailed vulnerability data augmented with recommendations, researched by Sonatype.">
              <NxTag color="sky">Deep Dive</NxTag>
            </NxTooltip>
          )}
          {vulnerabilityDetails.isAdvancedVulnerabilityDetection && (
            <NxTooltip title="Vulnerabilities detected in entire files and embedded dependencies, typically beyond the public feeds.">
              <NxTag color="turquoise">Advanced Vulnerability Detection</NxTag>
            </NxTooltip>
          )}
        </span>
        {urlVulnerabilityCustomize && (
          <span className="iq-vulnerability-details__customize-vulnerability-button">
            <a
              id="customize-vulnerability-button"
              data-testid="customize-vulnerability-button"
              href={urlVulnerabilityCustomize}
              className={classnames('nx-btn', 'nx-btn--tertiary')}
            >
              Customize
            </a>
          </span>
        )}
      </NxH2>
      {componentName && (
        <>
          <NxFontAwesomeIcon icon={faCube} /> <span className="nx-h4">{componentName}</span>
        </>
      )}

      <div className="nx-grid-row">
        <div className="nx-grid-col">
          <IssueDetail
            key={vulnerabilityDetails.identifier}
            identifier={vulnerabilityDetails.identifier}
            vulnerabilityLink={vulnerabilityDetails.vulnerabilityLink}
            vulnIds={vulnerabilityDetails.vulnIds}
          />
          <SeverityDetail
            mainSeverity={vulnerabilityDetails.mainSeverity}
            customSeverity={vulnerabilityDetails.customData?.cvssSeverity}
            severityScores={vulnerabilityDetails.severityScores}
          />
          <WeaknessDetail weakness={vulnerabilityDetails.weakness} customCwe={vulnerabilityDetails.customData?.cweId} />
          <SourceDetail source={vulnerabilityDetails.source} />
          <CategoriesDetail categories={vulnerabilityDetails.categories} />
        </div>
        <div className="nx-grid-col">
          {vulnerabilityDetails.customData?.remediation && (
            <NxInfoAlert>
              <NxH3>Custom Remediation:</NxH3>
              <NxP>{vulnerabilityDetails.customData.remediation}</NxP>
            </NxInfoAlert>
          )}
          <DescriptionDetail source={vulnerabilityDetails.source} description={vulnerabilityDetails.description} />
          <MarkdownDetail
            title="Explanation"
            warning={maliciousCodeWarning}
            markdown={vulnerabilityDetails.explanationMarkdown}
            componentSpecificMarkdown={vulnerabilityDetails.componentExplanationMarkdown}
          />
          <MarkdownDetail
            title="Detection"
            markdown={vulnerabilityDetails.detectionMarkdown}
            componentSpecificMarkdown={vulnerabilityDetails.componentDetectionMarkdown}
          />
          <MarkdownDetail
            title="Recommendation"
            markdown={vulnerabilityDetails.recommendationMarkdown}
            componentSpecificMarkdown={vulnerabilityDetails.componentRecommendationMarkdown}
          />
          <VulnerableVersionRangesDetail vulnerableVersionRanges={vulnerabilityDetails.vulnerableVersionRanges} />
          <RootCauseDetail rootCauses={vulnerabilityDetails.rootCauses} />
          <AdvisoriesDetail advisories={vulnerabilityDetails.advisories} />
          <CVSSDetail severity={vulnerabilityDetails.mainSeverity} customData={vulnerabilityDetails.customData} />
        </div>
      </div>
    </div>
  );
};

IqVulnerabilityDetails.propTypes = propTypes;
IqVulnerabilityDetails.propTypes.componentName = PropTypes.string;
IqVulnerabilityDetails.propTypes.componentIdentifier = PropTypes.object;
IqVulnerabilityDetails.propTypes.ownerType = PropTypes.string;
IqVulnerabilityDetails.propTypes.ownerId = PropTypes.string;
IqVulnerabilityDetails.propTypes.showCustomizeButton = PropTypes.bool;
IqVulnerabilityDetails.propTypes.componentHash = PropTypes.string;
IqVulnerabilityDetails.propTypes.tabId = PropTypes.string;
IqVulnerabilityDetails.propTypes.repositoryId = PropTypes.string;
IqVulnerabilityDetails.propTypes.matchState = PropTypes.string;
IqVulnerabilityDetails.propTypes.pathname = PropTypes.string;
IqVulnerabilityDetails.propTypes.isFirewall = PropTypes.bool;

export default IqVulnerabilityDetails;
