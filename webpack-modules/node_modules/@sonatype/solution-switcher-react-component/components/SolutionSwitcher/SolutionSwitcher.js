/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
import React from 'react';
import './SolutionSwitcher.scss';
import { NxDropdown, useToggle } from '@sonatype/react-shared-components';
import classNames from 'classnames';
import useSolutionSwitcher from './useSolutionSwitcher';
import SolutionListItem from './SolutionListItem/SolutionListItem';
import SolutionSwitcherIcon from './images/solution-switcher-icon.svg';
import SolutionSwitcherIconWhite from './images/solution-switcher-icon-white.svg';
import { NxLoadingSpinner } from '@sonatype/react-shared-components';
import SolutionSubmenu from './SolutionSubmenu/SolutionSubmenu';
var SolutionSwitcher = function (_a) {
    var _b = _a.containerClassName, containerClassName = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? 'standard' : _c, licensedSolutions = _a.licensedSolutions, loading = _a.loading;
    var _d = useToggle(false), isOpen = _d[0], onToggleCollapse = _d[1];
    var _e = useSolutionSwitcher({ licensedSolutions: licensedSolutions, isOpen: isOpen }), mySonatypeSolutions = _e.mySonatypeSolutions, exploreSolutions = _e.exploreSolutions;
    var convertSolutionsToListItems = function (solutions) {
        if (!solutions) {
            return [];
        }
        return solutions.map(function (solution) {
            if (solution.instances) {
                return React.createElement(SolutionSubmenu, { key: solution.id, solutionInstances: solution.instances, name: solution.name, id: solution.id });
            }
            return React.createElement(SolutionListItem, { key: solution.id, solution: solution });
        });
    };
    var hasMySonatypeSolutions = !!(mySonatypeSolutions === null || mySonatypeSolutions === void 0 ? void 0 : mySonatypeSolutions.length);
    var hasExploreSolutions = !!(exploreSolutions === null || exploreSolutions === void 0 ? void 0 : exploreSolutions.length);
    var solutionSwitcherClasses = classNames('spp-solution-switcher', {
        'spp-solution-switcher--open': isOpen,
        'spp-solution-switcher--standard': size === 'standard',
        'spp-solution-switcher--small': size === 'small'
    });
    return (React.createElement("div", { "data-testid": "solution-switcher", className: "spp-solution-switcher-container ".concat(containerClassName) },
        React.createElement(NxDropdown, { isOpen: isOpen, onToggleCollapse: onToggleCollapse, className: solutionSwitcherClasses, label: React.createElement("img", { src: isOpen ? SolutionSwitcherIconWhite : SolutionSwitcherIcon, alt: "solution switcher" }) },
            React.createElement(React.Fragment, null,
                (hasMySonatypeSolutions || loading) &&
                    React.createElement("section", { "aria-labelledby": "my-sonatype-header" },
                        React.createElement("p", { id: "my-sonatype-header", className: "spp-solution-switcher__subheader" }, "My Sonatype Solutions"),
                        loading ? React.createElement(NxLoadingSpinner, null) : convertSolutionsToListItems(mySonatypeSolutions)),
                (hasMySonatypeSolutions || loading)
                    && hasExploreSolutions
                    && React.createElement("div", { className: "spp-solution-switcher__section-space" }),
                hasExploreSolutions &&
                    React.createElement("section", { "aria-labelledby": "explore-header" },
                        React.createElement("p", { id: "explore-header", className: "spp-solution-switcher__subheader" }, "Explore"),
                        convertSolutionsToListItems(exploreSolutions))))));
};
export default SolutionSwitcher;
//# sourceMappingURL=SolutionSwitcher.js.map