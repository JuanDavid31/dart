/*
 * Copyright (c) 2011-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/clm/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { SolutionIds } from './types';
import defaultSolutionsList from './DefaultSolutionsList';
import differenceBy from 'lodash/differenceBy';
import groupBy from 'lodash/groupBy';
import SolutionLogoMap from './SolutionSwitcherLogoMap';
import SolutionNameMap from './SolutionNameMap';
var useSolutionSwitcher = function (_a) {
    var licensedSolutions = _a.licensedSolutions;
    var sortSolutions = function (solutions) {
        var sortedSolutions = solutions.sort(function (a, b) {
            //otherwise sort alphabetically
            var nameA = a.name.toLowerCase();
            var nameB = b.name.toLowerCase();
            if (nameA < nameB) {
                return -1;
            }
            if (nameA > nameB) {
                return 1;
            }
            return 0;
        });
        return sortedSolutions;
    };
    var getLicensedSolutionsWithInstances = function () {
        var licensedSolutionsGroupedById = groupBy(licensedSolutions, 'id');
        return Object.values(licensedSolutionsGroupedById).map(function (solutionByID) {
            var id = solutionByID[0].id;
            return __assign({ id: id, name: SolutionNameMap[id], icon: SolutionLogoMap[id] }, (solutionByID.length === 1 ?
                {
                    url: solutionByID[0].url
                }
                : {
                    instances: solutionByID.map(function (instance) {
                        return { name: instance.name || '', url: instance.url };
                    })
                }));
        });
    };
    var getFormattedSolutions = function () {
        //filter out developer until it has a marketing link
        var exploreSolutions = differenceBy(defaultSolutionsList, licensedSolutions, 'id')
            .filter(function (solution) { return solution.id !== SolutionIds.Developer; });
        var licensedSolutionsWithInstances = getLicensedSolutionsWithInstances();
        var sortedMySonatypeSolutions = sortSolutions(licensedSolutionsWithInstances);
        return { mySonatypeSolutions: sortedMySonatypeSolutions, exploreSolutions: exploreSolutions };
    };
    return __assign({}, getFormattedSolutions());
};
export default useSolutionSwitcher;
//# sourceMappingURL=useSolutionSwitcher.js.map