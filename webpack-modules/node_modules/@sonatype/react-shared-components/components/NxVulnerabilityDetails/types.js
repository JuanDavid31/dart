/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import * as PropTypes from 'prop-types';
/* eslint-disable camelcase */
export var SeveritySourceEnum;
(function (SeveritySourceEnum) {
    SeveritySourceEnum["cve_cvss_3"] = "CVE CVSS 3";
    SeveritySourceEnum["cve_cvss_2"] = "CVE CVSS 2.0";
    SeveritySourceEnum["sonatype_cvss_3"] = "Sonatype CVSS 3";
    SeveritySourceEnum["sonatype_cvss_2"] = "Sonatype CVSS 2.0";
})(SeveritySourceEnum || (SeveritySourceEnum = {}));
export var ReferenceTypeEnum;
(function (ReferenceTypeEnum) {
    ReferenceTypeEnum["PROJECT"] = "Project";
    ReferenceTypeEnum["ATTACK"] = "Attack";
    ReferenceTypeEnum["THIRD_PARTY"] = "Third Party";
    ReferenceTypeEnum["EVIDENCE"] = "Evidence";
    ReferenceTypeEnum["UNKNOWN"] = "Unknown";
})(ReferenceTypeEnum || (ReferenceTypeEnum = {}));
var severityScorePropType = PropTypes.shape({
    source: PropTypes.oneOf(['cve_cvss_3', 'cve_cvss_2', 'sonatype_cvss_3', 'sonatype_cvss_2', '']),
    score: PropTypes.number.isRequired,
    vector: PropTypes.string
});
export var vulnerabilityDetailsPropType = PropTypes.shape({
    identifier: PropTypes.string.isRequired,
    vulnerabilityLink: PropTypes.string,
    source: PropTypes.shape({
        longName: PropTypes.string,
        shortName: PropTypes.string
    }),
    mainSeverity: severityScorePropType,
    severityScores: PropTypes.arrayOf(severityScorePropType.isRequired),
    weakness: PropTypes.shape({
        cweSource: PropTypes.string.isRequired,
        cweIds: PropTypes.arrayOf(PropTypes.shape({
            id: PropTypes.string.isRequired,
            uri: PropTypes.string.isRequired
        }).isRequired).isRequired
    }),
    categories: PropTypes.arrayOf(PropTypes.string.isRequired),
    advisories: PropTypes.arrayOf(PropTypes.shape({
        referenceType: PropTypes.string,
        url: PropTypes.string
    }).isRequired),
    rootCauses: PropTypes.arrayOf(PropTypes.shape({
        listOfPaths: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,
        versionRange: PropTypes.string.isRequired
    }).isRequired),
    descriptionHtml: PropTypes.string,
    explanationHtml: PropTypes.string,
    detectionHtml: PropTypes.string,
    recommendationHtml: PropTypes.string,
    componentExplanationHtml: PropTypes.string,
    componentDetectionHtml: PropTypes.string,
    componentRecommendationHtml: PropTypes.string
});
//# sourceMappingURL=types.js.map