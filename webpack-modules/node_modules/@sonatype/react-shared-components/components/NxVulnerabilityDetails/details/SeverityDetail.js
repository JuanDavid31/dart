var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
/* eslint react/prop-types: 0 */
import React from 'react';
import { map } from 'ramda';
import RenderDetail from './RenderDetail';
import SeverityScoreDisplay from './SeverityScoreDisplay';
import SubDescriptionList from './SubDescriptionList';
function renderScore(severityScore) {
    return React.createElement(SeverityScoreDisplay, { key: severityScore.source || 'only', severityScore: severityScore });
}
var SeverityDetail = function SeverityDetail(_a) {
    var mainSeverity = _a.mainSeverity, severityScores = _a.severityScores;
    var compoundedSeverities = mainSeverity
        ? __spreadArray([mainSeverity], (severityScores || []), true) : __spreadArray([], (severityScores || []), true);
    return compoundedSeverities && compoundedSeverities.length ? (React.createElement(RenderDetail, { title: "Severity" },
        React.createElement(SubDescriptionList, null, map(renderScore, compoundedSeverities)))) : null;
};
export default SeverityDetail;
//# sourceMappingURL=SeverityDetail.js.map