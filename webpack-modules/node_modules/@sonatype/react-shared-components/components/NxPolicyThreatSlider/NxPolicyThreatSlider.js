var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/*
 * Copyright (c) 2019-present Sonatype, Inc.
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/.
 */
import React from 'react';
import { Slider } from '@material-ui/core';
import classnames from 'classnames';
import { omit } from 'ramda';
import { categoryByPolicyThreatLevel } from '../../util/threatLevels';
import { propTypes } from './types';
export { propTypes } from './types';
import './NxPolicyThreatSlider.scss';
/**
 * A ValueLabelComponent that renders the values inside of the thumbs and changes CSS classes depending on
 * position/value
 */
function NxPolicyThreatSliderValueLabelDisplay(props) {
    var value = props.value, children = props.children, className = props.className, disabled = props.disabled, index = props.index, otherProps = __rest(props, ["value", "children", "className", "disabled", "index"]), 
    // this impl doesn't need to support these props. Filter them out so they don't cause react warnings on the span
    filteredProps = omit(['open', 'valueLabelFormat', 'valueLabelDisplay'], otherProps), limitedValue = Math.min(10, Math.max(0, Math.round(value))), threatCategory = categoryByPolicyThreatLevel[limitedValue], thumb = React.Children.only(children), screenReaderValue = "".concat(limitedValue, " (").concat(threatCategory, ")"), label = "threat level ".concat(index === 0 ? 'min' : 'max'), 
    // the thumb element isn't initially constructed with any children. Add the value as its child and
    // add extra accessibility attrs
    additionalThumbProps = {
        'aria-valuetext': screenReaderValue,
        'aria-disabled': disabled,
        'aria-label': label
    }, thumbWithLabel = React.cloneElement(thumb, additionalThumbProps, limitedValue), nxBaseClass = 'nx-policy-threat-slider__value-label', classes = classnames(nxBaseClass, "".concat(nxBaseClass, "--").concat(threatCategory), className);
    return (React.createElement("span", __assign({ className: classes }, filteredProps), thumbWithLabel));
}
var NxPolicyThreatSlider = function NxPolicyThreatSlider(_a) {
    var onChange = _a.onChange, value = _a.value, className = _a.className, disabled = _a.disabled;
    var classes = classnames('nx-policy-threat-slider', className);
    function sliderOnChange(_, val) {
        if (onChange) {
            onChange(val);
        }
    }
    return (React.createElement("div", { className: classes },
        React.createElement(Slider, { value: value, min: 0, max: 10, marks: true, disabled: disabled || undefined, ValueLabelComponent: NxPolicyThreatSliderValueLabelDisplay, onChange: sliderOnChange })));
};
NxPolicyThreatSlider.propTypes = propTypes;
export default NxPolicyThreatSlider;
//# sourceMappingURL=NxPolicyThreatSlider.js.map